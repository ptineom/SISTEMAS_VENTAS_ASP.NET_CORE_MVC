"use strict"
var oAlerta = {
    intervalId: 0,
    timeOutId: 0,
    alertInstance: null,
    show: function (config) {
        let boldText = !!config.boldText ? config.boldText : '';
        let message = !!config.message ? config.message : '';
        let simpleAlert = !!config.simpleAlert ? config.simpleAlert : false;
        let type = !!config.type ? config.type : 'default';
        let closeAutomatic = config.closeAutomatic != undefined ? config.closeAutomatic : true;

        let header = '', iconSvg = '', alertString = '';
        let content, position, top;

        //Llamado desde un modal.
        if (!!config.container) {
            content = document.querySelector(config.container);
            position = "absolute";
            top = "50"
        } else {
            content = document.getElementById('content');
            position = "fixed";
            top = "60"
        }

        switch (type) {
            case "success":
                header = "¡Éxito!";
                iconSvg = "check-circle-fill";
                break;
            case "info":
                header = "¡Información!"
                iconSvg = "info-fill";
                break;
            case "warning":
                header = "¡Advertencia!";
                iconSvg = "exclamation-triangle-fill";
                break;
            case "danger":
                header = "¡Error!";
                iconSvg = "exclamation-triangle-fill";
                break;
            default:
                header = "¡Alerta!";
                iconSvg = "";
                break;
        }

        //Si ya existe una alerta abierta pasará a cerrarla, para poder crear uno nuevo.
        if (document.getElementById('alerta') != null) 
            oAlerta.alertInstance.close();

        let style = `style='position: ${position};top: ${top}px;z-index: 9999;right: 10px; opacity:1; max-width:380px'`;

        //Alerta simple, sin iconos, ni titulo
        if (simpleAlert) {
            alertString = `<div class="alert alert-${type} alert-dismissible fade show" ${style} role="alert" id="alerta">
                        <strong>${boldText != "" ? ("¡" + boldText + "!") : ""}</strong> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
        } else {
            //Alerta con titulo, icono
            alertString = `<div class="alert alert-${type}" alert-dismissible fade show role="alert" ${style} id="alerta">
                        <div class="d-flex">
                            <h5>${header}</h5>
                            <div class="flex-grow-1 text-end">
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        </div>
                        <div class="d-flex align-items-center">
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="${type}:"><use xlink:href="#${iconSvg}" /></svg>
                            <div class="flex-grow-1">
                                ${message}
                            </div>
                        </div>
                    </div>`;
        }
        //Creamos el componente en el DOM.
        content.insertAdjacentHTML('afterbegin', alertString);

        //Creamos la instancia del componenete en botstrap
        let alerta = document.getElementById('alerta')
        oAlerta.alertInstance = new bootstrap.Alert(alerta)

        //Recordar que hemos utilizado "close.bs.alert" y no "closed.bs.alert"(espera que se cierre la transicion de css).
        alerta.addEventListener('close.bs.alert', function (e) {
            clearTimeout(oAlerta.timeOutId);
            clearInterval(oAlerta.intervalId);
            e.target.parentElement.removeChild(e.target);
            oAlerta.alertInstance = null;
        })

        //Cierre automatico
        if (closeAutomatic) {
            let msTimeout = 5000;
            let msInterval = 200;

            //Después de cumplir el intervalo indicado en el timeout, desaparecerá lentamente.
            oAlerta.timeOutId = setTimeout(() => {
                //Disminuirá la opacidad del componente hasta desaparecer.
                oAlerta.intervalId = setInterval(function () {
                    if (alerta.style.opacity > 0) {
                        alerta.style.opacity -= 0.1;
                    } else {
                        clearInterval(oAlerta.intervalId);
                        alerta.parentElement.removeChild(alerta);
                        oAlerta.alertInstance = null;
                    }
                }, msInterval);
            }, msTimeout);
        }
    }
}
"use strict"
String.prototype.isnullOrEmpty = function () {
    if (this == null) {
        return true; 
    };
    if (this.trim().length == 0) {
        return true;
    };
    return false;
}
String.prototype.revertir = function () {
    return this.split("").reverse().join("");
}
String.prototype.capitalizeAll = function () {
    let arr = this.split(' ');
    let count = arr.length;
    let resultado = '';
    for (var i = 0; i < count; i++) {
        let palabra = arr[i].toLowerCase();
        let resultadoPalabra = (palabra.substring(0, 1).toUpperCase() + palabra.substring(1, palabra.length));
        resultado += i == 0 ? resultadoPalabra : (' ' + resultadoPalabra);
    }
    return resultado;
}
Array.prototype.max = function () {
    let max = Math.max.apply(null, this);
    return max == -Infinity? 0: max;
};

Array.prototype.min = function () {
    let min = Math.min.apply(null, this);
    return min == +Infinity ? 0 : min;
};
"use strict"
var oHelper = {
    showLoading: function (contenedor) {
        if (!!contenedor) {
            if (document.querySelector(contenedor) != null)
                document.querySelector(contenedor).insertAdjacentHTML("afterbegin", "<div id='dvLoading-partial'></div>")
        } else {
            let body = document.getElementsByTagName('body')[0];
            body.insertAdjacentHTML("afterbegin", "<div id='dvLoading'></div>")
        }
    },
    hideLoading: function () {
        let loadingPartial = document.getElementById('dvLoading-partial');
        let dvLoading = document.getElementById('dvLoading');

        if (dvLoading != null) {
            let body = document.getElementsByTagName('body')[0];
            body.removeChild(dvLoading);
        } else if (loadingPartial != null) {
            loadingPartial.parentElement.removeChild(loadingPartial);
        }
    },
    mayusInput: function (e) {
        var ss = e.target.selectionStart;
        var se = e.target.selectionEnd;
        e.target.value = e.target.value.toUpperCase();
        e.target.selectionStart = ss;
        e.target.selectionEnd = se;
    },
    //Método para el evento keyup
    mayus: function (obj) {
        obj.value = obj.value.toUpperCase();
    },
    //Método para el evento keyup, tambien se puede usar en keypress,pero recomendable en keyup, para que de el salto al soltar la tecla.
    teclaEnter: function (e, t) {
        if (e.key == 'Enter')
            document.getElementById(t).focus();
    },

    //Método para el evento keypress
    soloNumerosEnteros: function (e) {
        let regex = /^[0-9]+$/;
        if (!regex.test(e.key))
            event.preventDefault();
    },
    //Método para el evento keypress
    numerosDecimales: function (evt, decimales) {
        // Backspace = 8, Enter = 13, ‘0′ = 48, ‘9′ = 57, ‘.’ = 46, ‘-’ = 43
        let key = window.Event ? evt.which : evt.keyCode;
        let chark = String.fromCharCode(key);
        // Se realiza esta lógica por que cuando estan insertados todos los numeros decimales, no permite insertar
        // en la parte entera, ni modificar en cualquier parte del texto.
        // indices de la posicion del cursor.
        // si el selectionStart y selectionEnd son iguales quiere decir que no hubo seleccion de texto, pero el cursor
        // si esta situado en alguna posicion.
        let input = evt.target;
        let si = input.selectionStart;
        let sf = input.selectionEnd
        var resultado = "";
        if (si != sf) {// hubo seleccion de texto
            // capturamos los textos que se encuentra antes y despues del texto seleccionado. 
            let textoInicial = input.value.substring(0, si);
            let textoFinal = input.value.substring(sf, input.value.length);
            resultado = textoInicial + chark + textoFinal;
        } else {// solo situamos el cursor en alguna posicion del texto e intemos escribir.
            let inxPunto = input.value.indexOf('.');
            if (si <= inxPunto) {// si el intento de escribir es en el lado izquierdo del punto.
                let textoInicial = input.value.substring(0, si);
                let textoFinal = input.value.substring(si, input.value.length);
                resultado = textoInicial + chark + textoFinal;
            }
        }
        let tempValue = ''
        if (resultado != "") {
            tempValue = resultado;
        } else {
            tempValue = input.value + chark;
        }
        if (key >= 48 && key <= 57) {
            if (oHelper.filter(tempValue, decimales) === false) {
                evt.preventDefault();
            }
        } else {
            if (key == 8 || key == 13 || key == 0 || key == 46) {
                if (key == 46) {
                    if (oHelper.filter(tempValue, decimales) === false) {
                        evt.preventDefault();
                    }
                }
            } else {
                evt.preventDefault();
            }
        }
    },
    // método que se utiliza para verificar que el formato de dicho textbox solo sea numeros con 2 decimales
    filter: function filter(__val__, decimales) {
        let preg;
        if (decimales != undefined) {
            preg = new RegExp("^([0-9]+\.?[0-9]{0," + decimales + "})$");
        } else {
            preg = /^([0-9]+\.?[0-9]{0,2})$/;
        }
        if (preg.test(__val__) === true) {
            return true;
        } else {
            return false;
        }

    },
    isValidEmail: function (mail) {
        return /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,4})+$/.test(mail);
    },
    limpiarTabla: function (table) {
        let tBody = table.getElementsByTagName('tbody')[0];
        while (tBody.hasChildNodes()) {
            tBody.removeChild(tBody.firstChild);
        }
    },
    convertDateCsToJs: function (value) {
        var jsDate = new Date(parseInt(value.replace(/[^0-9 +]/g, '')));
        return jsDate;
    },
    fechaCortaCsToJs: function (value) {
        var date = new Date(parseInt(value.replace(/[^0-9 +]/g, '')));
        var dd = date.getDate();
        var mm = date.getMonth() + 1; //hoy es 0!
        var yyyy = date.getFullYear();
        if (dd < 10) dd = '0' + dd
        if (mm < 10) mm = '0' + mm
        date = dd + '/' + mm + '/' + yyyy;
        return date
    },
    horaCortaCsToJs: function (value) {
        var date = new Date(parseInt(value.replace(/[^0-9 +]/g, '')));
        var hora = date.getHours();
        var minuto = date.getMinutes(); //hoy es 0!
        var segundo = date.getSeconds();
        if (hora < 10) hora = '0' + hora;
        if (minuto < 10) minuto = '0' + minuto;
        if (segundo < 10) segundo = '0' + segundo;
        return (hora + ':' + minuto + ':' + segundo);
    },
    fechaCorta: function (date) {
        var dd = date.getDate();
        var mm = date.getMonth() + 1; //hoy es 0!
        var yyyy = date.getFullYear();
        if (dd < 10) dd = '0' + dd
        if (mm < 10) mm = '0' + mm
        date = dd + '/' + mm + '/' + yyyy;
        return date
    },
    horaCorta: function (date) {
        var hora = date.getHours();
        var minuto = date.getMinutes(); //hoy es 0!
        var segundo = date.getSeconds();
        if (hora < 10) hora = '0' + hora;
        if (minuto < 10) minuto = '0' + minuto;
        if (segundo < 10) segundo = '0' + segundo;
        return (hora + ':' + minuto + ':' + segundo);
    },
    fechaActual: function () {
        var hoy = new Date();
        var dd = hoy.getDate();
        var mm = hoy.getMonth() + 1; //hoy es 0!
        var yyyy = hoy.getFullYear();
        if (dd < 10) dd = '0' + dd
        if (mm < 10) mm = '0' + mm
        hoy = dd + '/' + mm + '/' + yyyy;
        return hoy
    },
    horaActual: function () {
        var hoy = new Date();
        var hh = hoy.getHours();
        var mm = hoy.getMinutes; //hoy es 0!
        var ss = hoy.getSeconds();
        if (hh < 10) hh = '0' + hh;
        if (mm < 10) mm = '0' + mm;
        if (ss < 10) ss = '0' + ss;
        hoy = hh + ':' + mm + ':' + ss;
        return hoy
    },
    fechaHoraFormatoLocal: function (fecha) {
        var hoy = fecha;
        // fecha
        var dia = hoy.getDate();
        var mes = hoy.getMonth() + 1; //hoy es 0!
        var anio = hoy.getFullYear();
        if (dia < 10) dia = '0' + dia
        if (mes < 10) mes = '0' + mes
        // hora
        var hora = hoy.getHours();
        var minuto = hoy.getMinutes(); //hoy es 0!
        var segundo = hoy.getSeconds();
        if (hora < 10) hora = '0' + hora;
        if (minuto < 10) minuto = '0' + minuto;
        if (segundo < 10) segundo = '0' + segundo;
        return (dia + '/' + mes + '/' + anio) + ' ' + (hora + ':' + minuto + ':' + segundo);
    },
    validarFormatoFecha: function (campo) {
        var RegExPattern = /^\d{1,2}\/\d{1,2}\/\d{2,4}$/;
        if ((campo.match(RegExPattern)) && (campo != '')) {
            return true;
        } else {
            return false;
        }
    },
    validarFechaFormato: function (fecha) {
        if ((fecha.length > 10) || (fecha.length < 10)) return false;
        var RegExPattern = /^\d{1,2}\/\d{1,2}\/\d{2,4}$/;
        if (!fecha.match(RegExPattern)) return false;
        var fechaf = fecha.split("/");
        var day = parseInt(fechaf[0]);
        var month = parseInt(fechaf[1]);
        var year = parseInt(fechaf[2]);
        var date, _mes;
        if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
            month = (parseInt(month) - 1); // los meses en javascript : 0 - 11
            date = new Date(year, month, day);
            if (day == date.getDate() && month == date.getMonth() && year == date.getFullYear()) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
        return true;
    },
    formatoFechaStandar: function (fecha) {
        if (!oHelper.validarFechaFormato(fecha)) return "";
        var fechaf = fecha.split("/");
        var day = parseInt(fechaf[0]);
        var month = parseInt(fechaf[1]);
        var year = parseInt(fechaf[2]);
        return month + "/" + day + "/" + year;
    },
    convertDateToPeriodo: function (fecha) {
        var mes = 0;
        var anio = 0;
        var periodo = "";
        if (fecha.trim().length > 0 && fecha.trim().length == 10) {
            mes = fecha.substring(5, 3);
            anio = fecha.substring(10, 6);
            periodo = anio + mes;
        }
        return periodo;
    },
    isMobile: {
        android: function () {
            return navigator.userAgent.match(/Android/i);
        },
        blackBerry: function () {
            return navigator.userAgent.match(/BlackBerry/i);
        },
        iOS: function () {
            return navigator.userAgent.match(/iPhone|iPad|iPod/i);
        },
        opera: function () {
            return navigator.userAgent.match(/Opera Mini/i);
        },
        windows: function () {
            return navigator.userAgent.match(/IEMobile/i);
        },
        any: function () {
            return (oHelper.isMobile.android() || oHelper.isMobile.blackBerry() || oHelper.isMobile.iOS() || oHelper.isMobile.opera() || oHelper.isMobile.windows());
        }
    },
    addEvent: function (element, eventName, callback) {
        if (element.addEventListener) {
            element.addEventListener(eventName, callback, false);
        } else if (element.attachEvent) {
            element.attachEvent("on" + eventName, callback);
        } else {
            element["on" + eventName] = callback;
        }
    },
    formatoComprobante: function (serie, documento) {
        let maxLDocumento = 6;
        if (documento.toString().length > maxLDocumento) {
            throw new Error("La longitud del nro del comprobante no debe de sobrepasar de los " + maxLDocumento + " caracteres.");
        }
        let nroComprobante = ('000000' + documento);
        nroComprobante = nroComprobante.slice(nroComprobante.length - 6);
        return { serie: serie, documento: nroComprobante }
    },
    formatoLeftSerie: function (prefijo, valor) {
        debugger;
        if (prefijo == undefined) {
            throw new Error("Prefijo de serie indefinido");
        }
        if (valor == undefined) {
            throw new Error("Número de serie indefinido");
        }
        let lengthMax = 4, res2 = 0;
        let countCharacters = (lengthMax - prefijo.length);

        if (valor.toString().length <= countRepeat) {
            res2 = (countRepeat - valor.toString().length);
        } else {
            res2 = 0;
        }
        return resultado = (prefijo + ('0').repeat(res2));
    },
    convertToInt: function (numero) {
        let entera = parseInt(numero);
        let decimal = (numero - entera);
        let resultado = decimal > 0 ? numero : entera;
        return resultado;
    },
    formatoMiles: function (numero, decimales, siEsCeroEsvacio) {
        if (isNaN(numero)) 
            numero = 0;

        if ((decimales != undefined && isNaN(decimales)) || (decimales == undefined)) 
            decimales = 2;

        if (siEsCeroEsvacio != undefined) {
            if (siEsCeroEsvacio && numero == 0)
                return '';
        }

        return parseFloat(numero).toFixed(decimales).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
    },
    formatoMoneda: function (simbolo, numero, decimales) {
        let numeroEnMiles = oHelper.formatoMiles(numero, decimales);
        let nuevoFormato = simbolo + ' ' + (numeroEnMiles == '' ? 0 : numeroEnMiles);
        return nuevoFormato;
    },
    numeroSinMoneda: function (numero) {
        return numero.split(' ')[1].replace(/\,/g, '');
    },
    numeroSinMiles: function (numero) {
        return numero.replace(/\,/g, '');
    },
    dynamicSortMultiple: function () {
        /*
         * save the arguments object as it will be overwritten
         * note that arguments object is an array-like object
         * consisting of the names of the properties to sort by
         */
        var props = arguments;
        return function (obj1, obj2) {
            var i = 0, result = 0, numberOfProperties = props.length;
            /* try getting a different result from 0 (equal)
             * as long as we have extra properties to compare
             */
            while (result === 0 && i < numberOfProperties) {
                result = oHelper.dynamicSort(props[i])(obj1, obj2);
                i++;
            }
            return result;
        }
    },
    dynamicSort: function (property) {
        var sortOrder = 1;
        if (property[0] === "-") {
            sortOrder = -1;
            property = property.substr(1);
        }
        return function (a, b) {
            /* next line works with strings and numbers, 
             * and you may want to customize it to your needs
             */
            var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
            return result * sortOrder;
        }
    },
    popupCenter: function (url, title, w, h) {
        let nWidth = 0;
        let nHeight = 0;
        if (w == undefined && h == undefined) {
            //Porcentaje que servirá para calcular el tamaño del popup.
            let porc = 80;
            if (oHelper.isMobile.any()) {
                nWidth = screen.width;
                nHeight = screen.height;
            } else {
                nWidth = (screen.width * porc) / 100;
                nHeight = (screen.height * porc) / 100;
            }
        } else if ((w != undefined && h == undefined) || (w == undefined && h != undefined)) {
            throw new Error("Debe de especificar el width y/o height en el método popupCenter.");
        } else {
            nWidth = w;
            nHeight = h;
        }

        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        // window.innerWidth: Ancho de todo el navegador(incluido margenes, bordes, scrollbar). Cambiara de valor si es que cambia de tamaño el navegador
        // document.documentElement.clientWidth: Ancho del documento html sin margenes, bordes, scrollbar.
        // screen.width: Ancho de la pantalla y no cambia de valor asi cambie de tamaño el navegador.
        let width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        let height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (nWidth / 2)) + dualScreenLeft;
        var top = ((height / 2) - (nHeight / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + nWidth + ', height=' + nHeight + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    },
    evaluarSiEsMismoUsuario(usuarioSeleccionado, fnCallback) {
        if (usuarioSeleccionado == undefined) {
            throw new Error("Parámetro del usuario indefinido.");
        };
        if (fnCallback == undefined) {
            throw new Error("Parámetro callback indefinido.");
        } else {
            if (typeof fnCallback != 'function') {
                throw new Error("El parámetro callback debe ser de tipo function.");
            }
        };

        let bMismoUsuario = false;
        //Solo hará la compración del usuario cuando sea diferente a nuevo.
        let usuarioActual = JSON.parse(localStorage.getItem("usuarioActual"));
        if (usuarioActual != undefined) {
            if (usuarioActual.ID_USUARIO == usuarioSeleccionado) {
                bMismoUsuario = true;
            };
            fnCallback(bMismoUsuario);
        }
    },
};


'use string'
var oConfigControls = {
    inicializarDatePicker: function (selector) {
        selector = selector == undefined ? '.date-picker' : selector;
        $(selector).datepicker({
            autoclose: true,
            todayHighlight: true,
            language: 'es' //debes de descargar el nombredelarchivo.es.js, será el encargado de traducirlo en español. 
        }).prev().on('click', function () {
            $(this).next().focus();
        });
    },
    inicializarDataTable: function (objeto) {
        // Agregar botones
        let buttons = [];
        if (objeto.botones != undefined) {
            //Botón nuevo
            if (objeto.botones.btnNuevo != undefined) {
                let btnNuevo = objeto.botones.btnNuevo;
                if (btnNuevo.action == undefined) {
                    throw new Error("Acción indefinido en el botón nuevo.");
                }
                if (typeof btnNuevo.action != 'function') {
                    throw new Error("Tipo de dato incorrecto en la acción del botón nuevo, debió ser de tipo funcion.");
                }
                let text = '<span style="color:white"><i class="fas fa-file" ></i> ' + btnNuevo.text + '</span>';
                let className = "btn btn-primary"
                if (btnNuevo.className != undefined) {
                    if (!btnNuevo.className.isnullOrEmpty()) {
                        className = btnNuevo.className;
                    }
                }
                buttons.push({
                    text: text,
                    className: className,
                    action: function (e, dt, node, config) {
                        if (btnNuevo.action != undefined) {
                            btnNuevo.action();
                        }
                    }
                })
            }
            //Botón exportar
            if (objeto.botones.btnExportarExcel != undefined) {
                let btnExportarExcel = objeto.botones.btnExportarExcel;
                if (btnExportarExcel.action == undefined) {
                    throw new Error("Acción indefinido en el botón exportar a excel.");
                }
                if (typeof btnExportarExcel.action != 'function') {
                    throw new Error("Tipo de dato incorrecto en la acción del botón exportar a excel, debió ser de tipo funcion.");
                }
                let text = '<span ><i class="fas fa-file-excel" style="color:green"></i> ' + btnExportarExcel.text + '</span>';
                let className = "btn btn-default"
                if (btnExportarExcel.className != undefined) {
                    if (!btnExportarExcel.className.isnullOrEmpty()) {
                        className = btnExportarExcel.className;
                    }
                }
                buttons.push({
                    text: text,
                    className: className,
                    action: function (e, dt, node, config) {
                        if (btnExportarExcel.action != undefined) {
                            btnExportarExcel.action();
                        }
                    }
                })
            }
            //Botón consultar
            if (objeto.botones.btnConsultar != undefined) {
                let btnConsultar = objeto.botones.btnConsultar;
                if (btnConsultar.action == undefined) {
                    throw new Error("Acción indefinido en el botón consultar.");
                }
                if (typeof btnConsultar.action != 'function') {
                    throw new Error("Tipo de dato incorrecto en la acción del botón consultar, debió ser de tipo funcion.");
                }
                let text = '<span ><i class="fas fa-search" ></i> ' + btnConsultar.text + '</span>';
                let className = "btn btn-microsoft"
                if (btnConsultar.className != undefined) {
                    if (!btnConsultar.className.isnullOrEmpty()) {
                        className = btnConsultar.className;
                    }
                }
                buttons.push({
                    text: text,
                    className: className,
                    action: function (e, dt, node, config) {
                        if (btnConsultar.action != undefined) {
                            btnConsultar.action();
                        }
                    }
                })
            }
        }

        if (objeto.selector == undefined || objeto.selector == "")
            throw new Error("Nombre de la tabla no ingresado en la propiedad selector.")

        let arrColumns = [];
        if (objeto.arrColumns != undefined) {
            if (typeof objeto.arrColumns !== 'object')
                throw new Error("Tipo de dato incorrecto en la propiedad arrColumns");

            arrColumns = objeto.arrColumns;
        }

        let bFilter = false;
        if (objeto.bFilter != undefined) {
            if (typeof objeto.bFilter !== 'boolean')
                throw new Error("Tipo de dato incorrecto en la propiedad bFilter");

            bFilter = objeto.bFilter;
        }

        let bPaginate = false;
        if (objeto.bPaginate != undefined) {
            if (typeof objeto.bPaginate !== 'boolean')
                throw new Error("Tipo de dato incorrecto en la propiedad bPaginate");

            bPaginate = objeto.bPaginate;
        }

        let bInfo = false;
        if (objeto.bInfo != undefined) {
            if (typeof objeto.bInfo !== 'boolean')
                throw new Error("Tipo de dato incorrecto en la propiedad bInfo");

            bInfo = objeto.bInfo;
        }

        let bAutoWidth = false;
        if (objeto.bAutoWidth != undefined) {
            if (typeof objeto.bAutoWidth !== 'boolean')
                throw new Error("Tipo de dato incorrecto en la propiedad bAutoWidth");

            bAutoWidth = objeto.bAutoWidth;
        }

        if (objeto.fnCallBack != undefined) {
            if (!objeto.fnCallBack === 'function') {
                throw new Error("Tipo de dato incorrecto en la propiedad fnCallBack");
            }
        }

        let bLengthChange = false;
        if (objeto.bLengthChange != undefined) {
            if (typeof objeto.bLengthChange !== 'boolean')
                throw new Error("Tipo de dato incorrecto en la propiedad bLengthChange");

            bLengthChange = objeto.bLengthChange;
        }

        let arrLengthMenu = [10, 25, 50]
        if (window.innerWidth < 1200)
            arrLengthMenu = [5, 10, 25, 50];

        var config = {
            bSort: true,
            bAutoWidth: bAutoWidth,//calcula el ancho de las columnas y los ajusta según su contenido, pero para que calcule no debe de existir anchos predeterminados en las columnas.(por defecto viene en true)
            "aoColumns": arrColumns,// No hace falta las medidas para el width, automaticamente lo calcula segun el contenido y el ancho del webbrowser.
            "aaSorting": [], // la primera columna siempre viene con ordenacion asi  estblesca en false, pero con esta propiedad lo establece en false.
            //scrollX: true,
            bFilter: bFilter,
            bInfo: bInfo,
            bPaginate: bPaginate,
            bLengthChange: bLengthChange,//Oculta la opción para cambiar el números de registros a mostrar.
            "lengthMenu": arrLengthMenu,
            "language": {
                "sProcessing": "Procesando...",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "Ningún dato disponible en esta tabla",
                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                }
            }
        };
        $(objeto.selector).DataTable(config);

        if (objeto.callback != undefined)
            objeto.callback();

    },
    formReset: function (element) {
        let form = element;

        //Limpiamos con la ayuda de jquery.validate()
        var validator = $(form).validate();
        validator.resetForm();

        //Limpiamos lo generado por el unobtrosive
        Array.from(form.querySelectorAll("[data-valmsg-replace]")).forEach(span => {
            span.classList.remove("field-validation-error");
            span.classList.add("field-validation-valid");
            span.textContent = "";
        });
    },
    direccionarFilasGrilla(e, config) {
        let table = config.table;
        let txtFiltro = config.txtFiltro;

        if (table == undefined)
            throw new Error('Debe de especificar la tabla de datos');

        if (txtFiltro == undefined)
            throw new Error('Debe de especificar el elemento input que hace referencia al filtro');

        let keyCode = e.key == 'ArrowDown' || e.key == 'ArrowUp' || (e.key == 'Enter' && e.target.tagName != "INPUT") || e.key == "Escape";

        if (!keyCode)
            return;

        let tbody = table.getElementsByTagName('tbody')[0];
        let rows = tbody.rows;
        //No existen filas en el tbody
        if (rows.length == 0)
            return;

        //Obtenemos la fila que tenga la clase rowSelect
        let rowSelected = Array.from(rows).find((x) => {
            if (x.classList.contains("rowSelected"))
                return x;
        });

        let index = undefined;

        //Quitamos el focus del textbox para poder manipular sin problemas el direccionamiento de la tabla.
        txtFiltro.blur();

        switch (e.key) {
            case 'ArrowDown': //Flecha abajo
                //Si no existe ninguna fila marcada, se marcará la primera fila.
                if (rowSelected == undefined) {
                    rows[0].classList.add("rowSelected");
                } else {
                    index = rowSelected.rowIndex;

                    //Si no existe fila siguiente
                    if (rows[index] == undefined) 
                        return;

                    //Limpiamos
                    Array.from(rows).forEach(tr => tr.classList.remove("rowSelected"));
                    //Marcamos
                    rows[index].classList.add("rowSelected");
                }
                break;
            case 'ArrowUp': //Flecha arriba
                if (rowSelected == undefined) 
                    return;

                index = rowSelected.rowIndex;
                //Solo podemos subir de fila, si la fila seleccionada actual es mayor a 1(indice de la tabla)
                if (index <= 1) {
                    txtFiltro.focus();
                } else if (index > 1) {
                    //Limpiamos
                    Array.from(rows).forEach(tr => tr.classList.remove("rowSelected"));
                    //Marcamos
                    rows[index - 2].classList.add("rowSelected");
                }
                break;
            case 'Enter': //Enter
                index = rowSelected.rowIndex;
                let row = rows[index - 1];

                if (config.callback !== undefined)
                    config.callback(row);
                break;
            case 'Escape': //Esc
                if (config.callbackEsc !== undefined)
                    config.callbackEsc();
                break
        }
    }
}
'use strict'
var oAlertaModal = {
    resolve: null,
    reject: null,
    aceptar: false,
    instance: null,
    showConfirmation: function (config) {
        if (typeof config != 'object')
            throw new Error("El parámetro del modal de confirmación debe ser un objeto");

        let title = "Confirmación";
        let message = "";
        let textButton1 = "Cancelar";
        let textButton2 = "Aceptar";
        let iconButton1 = '<i class="bi bi-x-circle-fill"></i>';
        let iconButton2 = '<i class="bi bi-check-circle-fill"></i>';
        let size = "modal-sm";
        let showCheckOptional = false;
        let messageCheckOptional = "";

        if (config.title != undefined)
            title = config.title;

        if (config.message != undefined)
            message = config.message;

        if (config.textButton1 != undefined)
            textButton1 = config.textButton1;

        if (config.textButton2 != undefined)
            textButton2 = config.textButton2;

        if (config.iconButton1 != undefined)
            iconButton1 = config.iconButton1;

        if (config.iconButton2 != undefined)
            iconButton2 = config.iconButton2;

        if (config.size != undefined)
            size = config.size;

        if (config.showCheckOptional != undefined)
            showCheckOptional = config.showCheckOptional;

        if (config.messageCheckOptional != undefined)
            messageCheckOptional = config.messageCheckOptional;

        let html = `<div class="modal fade" tabindex="-1" aria-hidden="true" id="alerta-modal" aria-labelledby="staticBackdropLabel" style="z-index:99999">
                      <div class="modal-dialog ${size} modal-dialog-centered">
                        <div class="modal-content" >
                          <div class="modal-header py-3">
                            <h5 class="modal-title">${title}</h5>
                            <button type="button" class="btn-close" aria-label="Close" id="btnCloseAlerta"></button>
                          </div>
                          <div class="modal-body">
                            <div class="row">
                                <div class="col-9">
                                    <p class="mb-0">${message}</p>
                                    <div class="form-check" style="display:${showCheckOptional ? 'block' : 'none'}">
                                      <input class="form-check-input" type="checkbox" value="" id="chkOptional">
                                      <label class="form-check-label" for="chkOptional">
                                          <small class="text-muted">${messageCheckOptional}</small> 
                                      </label>
                                    </div>
                                </div>
                                <div class="col-3 "><i class="bi bi-question-circle-fill text-primary h2"></i></div>
                            </div>
                          </div>
                          <div class="modal-footer py-2">
                            <button type="button" class="btn btn-danger" id="btnCancelarAlerta" >${iconButton1} ${textButton1}</button>
                            <button type="button" class="btn btn-success" id="btnAceptarAlerta">${iconButton2} ${textButton2}</button>
                          </div>
                        </div>
                      </div>
                    </div>`;

        //Lo agregamos temporalmente al main del html
        let content = document.getElementsByTagName('body')[0]; // document.getElementById('content');
        let main = content.querySelector('main');
        main.insertAdjacentHTML("afterbegin", html);

        let options = {
            backdrop: "static"
        };
        let alertaModal = document.getElementById('alerta-modal')
        oAlertaModal.instance = new bootstrap.Modal(alertaModal, options);

        alertaModal.addEventListener('hidden.bs.modal', function () {
            if (!oAlertaModal.aceptar)
                oAlertaModal.reject();

            //Destruimos el modal.
            alertaModal.parentElement.removeChild(alertaModal);
        });

        alertaModal.querySelector('#btnAceptarAlerta').addEventListener('click', () => {
            oAlertaModal.aceptar = true;
            oAlertaModal.resolve({
                checkOptional: document.getElementById('chkOptional').checked
            });
            oAlertaModal.instance.hide();
        });

        Array.from(alertaModal.querySelectorAll('#btnCancelarAlerta, #btnCloseAlerta')).forEach(btn => {
            btn.addEventListener('click', () => {
                oAlertaModal.instance.hide();
            })
        })

        oAlertaModal.instance.show();

        return new Promise((resolve, reject) => {
            oAlertaModal.resolve = resolve;
            oAlertaModal.reject = reject;
        })
    }
}